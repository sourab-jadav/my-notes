
stack is a linear datastructr it works like box

OPERATIONS  --IN CPP
    --push()    --adds item from the top
    --pop()     --removes the top item from the stack
    --empty()   --returns true is stack is empty else false
    --size()    --returns the size
    --top()     --returns the top item


    **in python there is no explict stack or collection
    we imlement it using a list or deque

                --in java
    --isEmpty()
    --push();
    --pop();
    --peek();
    --size();


    --overflow: when the push called on a full stack
    --underflow: when pop called on a empty stack


ARRAY IMPLEMENTATION OF STACK                        |VECTOR BASED IMPLEMENTATION OF STACK CLASS
                                                     |struct mystack{
--attributes                                         |    vector<int> v;
    capacity;                                        |    void push(int x){
    size;                                            |        v.push_back(x);
                                                     |    }
--functions                                          |    int pop(){
    pop();                                           |        int res=v.back();
    push();                                          |        v.pop_back();
    top();                                           |        return res;
    size();                                          |    }
    empty();                                         |    int size(){
                                                     |        return v.size();
    class stack{                                     |    }
        int size;                                    |    bool isEmpty(){
        int capacity;                                |        return v.empty();
        int arr[capacity];  --int *arr;              |    }
        stack(int size){                             |}
            --arr=new int[size];                     |
            capacity=size;                           |
            size=0;                                  |
        }                                            |
        --operations                                 |
            void push(int x){                        |
                if(size==capacity){                  |
                    cout<<"overflow "<<endl;         |
                    return                           |
                }                                    |
                arr[size]=x;                         |
                size++;                              |
            }                                        |
        void pop(){                                  |
            if(size==0){                             |
                cout<<"underflow"<<endl;             |
                return                               |
            }                                        |
            size--;                                  |
        }                                            |
        int top(){                                   |
            if(size==0){                             |
                cout<<"stack is empty"<<" ";         |
                return -1;                           |
            }                                        |
            return arr[size-1];                      |
        }                                            |
        bool empty(){                                |
            return size==0;                          |
        }                                            |
                                                     |
    }                                                |
                                                     |
v.back()    --returns the last element in the vector



LINKED LIST IMPLENTATION OF STACK IN CPP

linked we can insert at the front and delete from the front in big o one time |----------APPLICATIONS OF STACK DATASTRUCTURE----------
so we do push and pop operation from the front                                |
                                                                              |--function call stack
struct Node{                                                                  |--checking for balanced paranthesis
    int data;                                                                 |--reversing items
    Node *next;                                                               |--infix to prefix/posfix
    Node(int d){                                                              |    infix is the expression that we generally write in programs
        data=d;                                                               |   -- in prefix expression  --operator first and then operands
        next=null;                                                            |   -- in postfix            --operands first and then operator
    }                                                                         |--evaluation of postfix/prefix
};                                                                            |********************--stock span problem 
                                                                              |--undo redo operation
struct mystack{                                                               |--forward backward  opeartion
    Node *head;                                                               |
    int size;                                                                 |
    mystack(){                                                                |
        head=null;                                                            |
        size=0;                                                               |stack in java
    }                                                                         |in java stack is supported using two classes
    void push(int x){                                                         |
        Node *temp=new Node(x);                                               |    --array deque class
        temp->next=head;                                                      |    --stack class
        head=temp;                                                            |
        size++;                                                               |    collections <--  list  <-- vector <-- stack
    }                                                                         |    collections <-- queue  <-- deque  <-- ArrayDeque
    void pop(){                                                               |
        if(head==null){                                                       |    the question is which one of these two will you use?
            return  INT_MAX;                                                  |        ArrayDeque                --specially in single
        }                                                                     |                                   threaded environment
        int res=head->data;                                                   |
        Node *temp=head;                                                      |
        head=head->next;                                                      |    stack inherits from the vector class which is thread safe class
        delete(temp);                                                         |    if you are working in a single threaded environment these thread safe class
        size--;                                                               |        is going to cause extra overhead hence should use ArrayDeque only 
        return res;                                                           |
    }                                                                         |        ArrayDeque<Integer> s = new ArrayDeque<>();
    int size(){                                                               |        s.push(20);
        return size;                                                          |        s.push(30);
    }                                                                         |        s.push(40);
    bool isEmpty(){                                                           |        sysout(s.peek());
        return head==null;                                                    |        sysout(s.pop());    --returns the top item that is removed
    }                                                                         |        sysout(s.size());
    int peek(){                                                               |        sysout(s.isEmpty());    --false
        if(head==null){                                                       |
            return INT_MAX;                                                   |        all have complexity big o one
        }                                                                     |
        return head->data;                                                    |        in java both vector and deque are array implementations
    }                                                                         |                                in array use can maintain one end where
}                                                                             |                                you can remove and add items in big o one 
                                                                                                               time complexity
                                                                               
                                                                                       these are dynamic sized array implementation so this big o one for
                                                                                       push and pop is AMMORTIZED TIME COMPLEXITY ,not the worst case
                                                                               
                                                                                       in ammortized tc -->if you are doing n operations the avg time might
                                                                                                           be big o one however one of thse opeartions is big o
                                                                                                           n
**----------CHECK FOR BALANCED PARENTHESIS
str="([])"
output:- yes

str="((()))"
output:- yes

str="([)]"
op:- no

as you can observe this problem has clearly last in first out property               |----------IMPLEMENTING TWO STACK IN AN ARRAY
    the bracket which opened last has to closed first                                |
                                                                                     |the idea is maintain two pointers 
    this is one of the classical problems and most useful applications of stack      |    top1 from the start 
                                                                                     |    top2 from the end
    **now how do you use stack                                                       |
    push half of the elements into the stack                                         |    when you want to add at the begin do top++ add at the beginning
    push another half othe elements into other stack                                 |
    now traverse through the both stack check whether they are equal brackets or not |    when you want to add at the end
    if not return false                                                              |    do top2-- add at the end
        else return true;                                                            |
                                                                                     |    class twoStack{
    --optimization to the problem is                                                 |        int * arr,cap,top1,top2;
    push into the stack until you see a closing bracket                              |        twostacks(int c){
                                                                                     |            cap=c;
        when you see a closing a bracket try matching with the top of the stack      |            top1=-1;
        if match is success pop it out of the stack and match next closing bracket   |            top2=cap;
                                                                                     |            arr= new int[cap];
        boolean matching(char a,char b){                                             |        }
            return ((a=='('&& b==')'))||                                             |        void push(int x){
                    (a=='{'&& b=='}')||                                              |            if(top1<top2-1){
                    --same code                                                      |                top1++;
        }                                                                            |                arr[top1]=x;
                                                                                     |            }
bool isbalanced(string &str){                                                        |        }
    stack<char>s;                                                                    |        void push2(int x){
    for(auto x:s){                                                                   |            if(top1<top2-1){
        if(x=='('!!x=='{'|| x=='['){                                                 |                top2--;
            s.push(x);                                                               |                arr[top2]=x;
        }else{                                                                       |            }
            if(s.empty()==false){                                                    |        }
                return false;                                                        |        int pop1(){
            }                                                                        |            if(top1>=0){
            if(matching(s.top(),x)==false){                                          |                int x=arr[top1];
                return false;                                                        |                top--;
            }                                                                        |                return x;
            else{                                                                    |            }else{
                s.pop();                                                             |                exit(1);
            }                                                                        |            }
        }                                                                            |        }
    }                                                                                |        int pop2(){
    return (s.empty()==true);                                                        |            if(top2<cap){
}                                                                                    |                int x=arr[top2];
                                                                                     |                top2++;
                                                                                     |                return x;
                                                                                     |            }else{
                                                                                     |                exit(1);
                                                                                     |            }
                                                                                     |        }
                                                                                     |    }        
****IMPLEMENTING K STACKS IN AN ARRAY

given an array,how to implement k stack array

the idea is to use additional array called next array




**finding the greatest first in an array
**finding the greatest last in an array
**we are given a array every value in this array represents heights of different bars in a histogram
width of these bars in an histogram are same they are all single unit widths

int arr[]{6,2,5,4,1,5,6};   --find the largest rectangular area for this histogram
--my ideas--
brute force:-
        the idea is traverse through the array
            for every element count number of elements >= current element
                and number of elements towrads right >= current element

                total_count+1*height    --is the area

efficient:-
    the idea is to maintain a stack keep track of index of the previous large element greater than the
    current element


    for(int i=0;i<n;i++){
        int curr=arr[i];
        for(int j=i-1;j>=0;j--){
            if(arr[i]>=arr[j]){
                curr+=arr[i];
            }else{
                break;
            }
        }
        for(int j=i+1;j<n;j++){
            if(arr[j]>=arr[i]){
                curr+=arr[i];
            }else{
                break;
            }
        }
        res=max(res,curr);
    }

    his idea is to find previous smaller element and next smaller element in theta n time


design a stack that supports push pop and getmin() operations in big on one time
think of a solution which requires big o n auxilary space overall 
we maintain two stack
one for storing the min elments and other for normal elements and min elements

push(x){
    //if the newly added item is smaller than equal to the top of the auxilary stack then only we push to the auxilary stack
    ms.push(x);                                                                         |push(x){
    if(ms.top()<=as.top()){                                                             |    if(s.empty()){
        as.push(x);                                                                     |        min=t;
    }                                                                                   |        s.push(t);
}                                                                                       |    }
                                                                                        |    else if(x<=min){
pop(){                                                                                  |        s.push(x-min);
    if(ms.top()==as.top()){                                                             |    }else{
        as.pop();                                                                       |        s.push(x);
    }                                                                                   |        min=x;
    ms.pop();                                                                           |    }
}                                                                                       |}
                                                                                        |
--how do we acheive without auxialry space      --we maintain a min varaible            |
                                                                                        |we have the prev min
5 10 20 2 6 4                                   **--instead of storing 2 we store 2-min |we have the curr_min < prev min
5 10 15 10 5                                                                            |
                                                                                        |store the curr_min-prev min =t in the stack
min                                                                                     |
5                                                                                       |pop(){
                                                                                             t=s.top();
                                                                                             if(t<0){
                                                                                                 min=min-t;
                                                                                                 s.pop();
                                                                                                 return t;
                                                                                             }else{
                                                                                                 s.pop();
                                                                                                 return t;
                                                                                             }
                                                                                         }
                                                                                         int peek(){
                                                                                             t=s.top();
                                                                                             return (t<=0)?min:t;
                                                                                         }
                                                                                         int getmin(){
                                                                                             return min;
                                                                                         }

handling the negatives
earlier we do x-min
now we do 2x=min

int peek(){
    t=s.peek();
    return (t<=min)? min:t
}
int pop(){
    t=s.pop();
    if(t<=min){
        res=min;
        min=2*min-t;
        return res
    }else{
        return t;
    }
}

x+y         --infix               
xy+         --postfix             
+xy         --prefix              

advantages
->we do not need parenthesis ,precendence and associative rules
->can be evaluated by writing the given expression exactly once

--------------------PRECEDENCE AND ASSOCIATIVITY        --remember usually associativity is left to right
^   -- right to left
*,/ --left to right 
+,- --left to right

                          CONVERTING INFIX TO POSTFIX

x+y*z   --xyz*+
(x+y)*z --xy+z*
first convert the inner most expresssion    --yz*
move towards left and keep converting       --xyz*+

(x+y)*z 
converting the inner most expression    (x+y)z*
next convertint the left most expresion     xy+z*

                           CONVERTING INFIX TO PREFIX(symbol occurs before)       --evaluate from right to left

x+y*z   +x*yz
(x+y)*z *+xyz

**********THINK OF CONVERSION FROM INFIX TO POSTFIX USING STACK

a+b*c   --acb*+

we are going to use stack to store the operators

(x+y)*z     xy+z*

when you see left bracket       --push it in to the stack
when you see +                  --+ has higher precedence than the ( so push it into the stack
when you see right bracket      --pop out the symbols from the stack until you see left bracket
then you see *(highest precedence)  --push it into the stack
when you see lower prec ope     --push out the operators from the stack until you found a lower precedence or stack is empty
then you see z                  --print it
string is done                  --print out the leftout characters from the stack


x*y+z       --xy*z+

done with the logic of post fix conversion

string conver_post_pix(string &s){
    stack<int> stk;
    hash_map<char,int> preced_table{
        {'(':0},
        {')':0},
        {'+':1},{'-':1},
        {'*':2},{'/':2},
        {'^':3}
    }
    for(auto x:s){
        --if x is  a character then print it
        --if x is an operator   then check for preced
            --if x is an opening bracket push the bracket into the stack
            --if x is an closing bracket pop the items from the stack until you see closing bracket
            --if the stack is empty push it
            --else if top stack has lower precedence then push it
            --else if higher precedence
                --pop the operators from the stack until you find a lower precendence 
            --else if equal precedence
                --analyze associativity make another map to check the associativity
    }
    if the stack is not empty then pop out the rest operators from the stack
}
-----------------------NAIVE APPROACH TO SOLVE THE PROBLEM
put the bracket whereever possible in the expression        --fully parenthesis
now evaluate the expression by first converting  the innermost expression to post fix 

--evaluting the post fix expression
10 2 * 3 +      
((10*2)+3)
2 3 4 5 + - *

((5+4)-3)*2)

--the idea is traverse through the string
    --when you find an opeartor
        --initially total is zero
        arr[i-1] arr[i] arr[i-2]

whenever we see an operator we take previous two operands and evaluate the operator

this guy is killingly utilizing the stack i don't know how do i use the stack
i got the idea of utilizing the two variables but i failed to execute it

if x is an operand , push to st

else(x is an operator){
    op1=st.pop();
    op2=st.pop();
    compute op1 x op2 and push the result to the stack
}
return st.top



infix to prefix conversion(naive approach)


infix=x+y*z
prefix=+x*yz

--naive solution is to fully parenthesis this expression
--i guess the same trick here but we traverse from the right to left


think of you are going to evaluate the prefix
    i guess the same to that of the post fix the chnage is we have to traverse from the right to left
