----------------------------------------------working tree data structure
binary heaps are mainly used to represent priority queues which are used for djikstra's algo halfman algo
trie is used to reprsent dictonaries
suffix tree is used to do fast searches in a stringc    --the time is proportionals to the length of the pattern not the text
binary index tree is used for range query searches    --is fast for limited range
segment tree does the same thing but more powerfull

**problem number 863
**problem number 654    --construct maximum binary tree

creating a binary tree from a vector {1, 5, 3, NULL, 4, 10, 6, 9, 2}
--using queue works even if the binary tree is not complete
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

TreeNode* createTree(vector<int>& v) {
    if (v.empty()) return nullptr;
    queue<TreeNode*> q;
    TreeNode* root = new TreeNode(v[0]);
    q.push(root);
    int i = 1;
    while (!q.empty() && i < v.size()) {
        TreeNode* node = q.front();
        q.pop();
        if (v[i] != NULL) {
            node->left = new TreeNode(v[i]);
            q.push(node->left);
        }
        i++;
        if (i < v.size() && v[i] != NULL) {
            node->right = new TreeNode(v[i]);
            q.push(node->right);
        }
        i++;
    }
    return root;
}

int main() {
    vector<int> v = {1, 5, 3, NULL, 4, 10, 6, 9, 2};
    TreeNode* root = createTree(v);
    // do something with the tree
    return 0;
}


--using recursion works only if the binary tree is complete
#include <iostream>
#include <vector>
using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

TreeNode* constructTree(vector<int>& nums, int i) {
    if (i >= nums.size() || nums[i] == NULL) {
        return NULL;
    }
    TreeNode* root = new TreeNode(nums[i]);
    root->left = constructTree(nums, 2 * i + 1);
    root->right = constructTree(nums, 2 * i + 2);
    return root;
}

TreeNode* constructTree(vector<int>& nums) {
    return constructTree(nums, 0);
}

int main() {
    vector<int> nums = {1, 5, 3, NULL, 4, 10, 6, 9, 2};
    TreeNode* root = constructTree(nums);
    return 0;
}

