8.finding the kth element in the array

method 1    using nth_element
nth_element(nums.begin(), nums.begin() + k - 1, nums.end(), greater<int>());
        return nums[k - 1];


jump game 

first recursive solution
int minJumps(vector<int> &nums, int l){
    if(l >= nums.size() - 1)
        return 0;

    int jumps = INT_MAX;

    for(int i = l+1; i <= l + nums[l]; i++)
        jumps = min(jumps, 1 + minJumps(nums, i));

    return jumps;
}

int jump(vector<int>& nums) {
    return minJumps(nums, 0);
}


//writing the dynamic programming solution on my own

stores[0]=0;
for(int i=1;i<n;i++){
    stores[i]=INT_MAX;
    for(int j=0;j<i;j++){
        if(j+arr[j]>=i && stores[j]!=INT_MAX){
            stores[i]=min(stores[i],stores[j]+1);
            break;
          }
      }
  }
  return stores[n-1];

  //recursive top down solution
  vector<int> stores;

int minjumpcount(int arr[],int start){
    if(n>=arr.size()-1){
        return 0;
      }
      if(stores[n]){
          return stores[n];
        }
        int minjumps=10000;
        for(int i=start+1;i)
  }
