==========introduction

g(n)/f(n)  =0           then f(n) is growing faster than g(n) f(n) is a bad algorithm
lim n->inf

how to we compare terms
c<loglogn<logn<n**1/3<n**1/2<n**2<n**3<n**4<2**n<n**n


asymptotic notations
big o   --exact or upper bound
big omega -exact or lower boundo

we say f(n) is big(o) of g(n) if there exists constants c and n(not) such that f(n)
is <= c(gn)  for all n>n(not)


f(n)=2n+3
if f(n) =bigo(g(n))
if g(n) =bigo(f(n))

f(n) is theta(g(n)) if there exists constants c1 and c2 and n(not)
such that c1(g(n))<f(n)<c2(g(n)) for all n> n(not)

c1(g(n))=3n
f(n)=2n+3
c2(g(n))=n

f(n)=theta(g(n))
then f(n)=bigo(g(n))
g(n)=bigo(f(n))
then f(n)=bigomega(g(n))
g(n)=bigomega(f(n))


time complexity analysis of the recursive problem
