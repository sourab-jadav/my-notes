#include<iostream>
using namespace std;

int main(){
    int arr[3][2]={{10,20},{30,40},{50,60}};
    for(int i=0;i<3;i++){
        for(int j=0;j<2;j++){
            cout<<arr[i][j]<<endl;
        }
    }

}

in cpp multi dimensional arrays are stored in row major order
internal-curly-brackets are optional and can use multi lines

**you can ommit the first dimension if you want
int arr[][2]{{1,2}, |int arr[][2]{1,2,
            {3,4},  |            3,4,
            {5,6},  |            5,6,
            {7,8}}; |            7,8};

int arr[][2][2]{{{1,2},{3,4}},
                {{5,6},{7,8}},
                {{9,10},{11,12}},
                {{13,14},{15,16}}}


variable sized array---

from cpp 14 user an allow variable sized arrays
int m=3,n=2;
int arr[m][n];


other ways of creating multidimenstional arrays

1--using double pointer

int main(){
    int m=3,n=2;
    int **arr;
    arr=new int*[m];
    for(int i=0;i<m;i++){
        arr[i]=new int[n];      //through here user can create different sized rows called jacked arrays
    }
    //    int arr[m][n] allocated dynamically
    //disadvantage is it is not cache friendly
}

2--using array of pointers
int main(){
    int m=3,n=2;
    int *arr[m];//this array of pointers is allocated on the stack
                //and individual pointers have pointers to dynamically allocated memory on the heap
    for(int i=0;i<m;i++){
        arr[i]=new int[n];
    }
}


3--using stl vector

we create m vectors and individual vector stores the contents of individual rows 

not as cache friendly as simple 2-d arrays

**the main advantage of this methods over other methods is
your individaul rows are of dynmaic sizes
**it is easier to pass vectors or 2d arrays to functions
int m=3,n=2;
vector<int> arr[m];
for(int i=0;i<m;i++){
    for(int j=0;j<n;j++){
        arr[i].push_back(10);
    }
}


4--using vector of vectors
using this number of rows can also be dynamic
int m=3,n=2;
vector<vector<int>>arr;

-------------------------------------------------------------------------------------------------------------------------------------------------
                                   passing multidimensional arrays as arguments to functions
-------------------------------------------------------------------------------------------------------------------------------------------------
void print(int arr[3][2]){
    for(int i=1;i<3;i++){
        for(int j=0;j<2;j++){
            cout<<arr[i][j]<<endl;
        }
    }
}
problems:-
    it only works for 3,2 matrix

    one way to to pass the number of rows as an argument
    void print(int arr[][2],int n)

    ** there is not direct syntax in cpp that allows you to specify row numbers
    and column numbers as seperate parameters
        
        because matrix declaration doesn't allow you to ommit all the dimensions 

solution:-
    using double pointer
    void print(int **arr,int m,int n){

    }
    using array of pointer
    void print(int *arr,int m,int n){

    }
    using array of vectors
    void print(vector<int>arr[],int m){

    }
    using vector of vectors
    void print(vector<vector<int>>&arr){

    }

-------------------------------------------------------------------------------------------------------------------------------------------------
                                                           print the matrix in snake pattern
-------------------------------------------------------------------------------------------------------------------------------------------------
    int arr[][4]{{1,2,3,4},                  |void printsnake(int arr[][]){
                {5,6,7,8},                   |    for(int i=0;i<r;i++){
                {9,10,11,12},                |        if(i%2==0){
                {13,14,15,16}};              |            for(int j=0;j<c;j++){
    int step=0;                              |                print(mat[i][j]+" ");
    int m=4,n=4;                             |            }
                                             |        }else{
    for(int i=0;i<m;i++){                    |            for(int j=c-1;j>=0;j--){
        for(int j=0;j<n;j++){                |                print(mat[i][j]+" ");
            if(i%2==0){                      |            }
                cout<<arr[i][step++]<<" ";   |        }
            }else{                           |    }
                cout<<arr[i][--step]<<" ";   |}
            }                                |
        }                                    |
    }                                        |


-------------------------------------------------------------------------------------------------------------------------------------------------
                                                            print the borders of the matrix
-------------------------------------------------------------------------------------------------------------------------------------------------
    int arr[][4]{{1,2,3,4},          |void btraversal(int arr[r][c]){
                {5,6,7,8},           |    if(r==1){
                {9,10,11,12},        |        for(int i=0;i<c;i++){
                {13,14,15,16}};      |            print(mat[0][i]+" ");
    int r=4,c=4;                     |        }
    int i,j,k;                       |    }
                                     |    else if {
    for( i=0;i<c;i++){               |        for(int i=0;i<r;i++){
        cout<<arr[0][i]<<" ";        |            print(mat[i][0]+" ");
    }                                |        }
    cout<<endl;                      |    }else{
    for( j=1;j<r;j++){               |        for(int i=0;i<c;i++){
        cout<<arr[j][c-1]<<" ";      |            print(mat[0][i]+" ");
    }                                |        }
    cout<<endl;                      |        for(int i=1;i<r;i++){
    i--;                             |            print(mat[i][c-1]+" ");
                                     |        }
    for(k=i-1;k>=0;k--){             |        for(int i=c-2;i>=0;i--){
        cout<<arr[j-1][k]<<" ";      |            print(mat[r-1][i]+" ");
    }                                |        }
    cout<<endl;                      |        for(int i=r-2;i>=1;i--){
    j--;                             |            print(mat[i][0]+" ");
   int l;                            |        }
   for(l=j-1;l>=0;l--) {             |    }
       cout<<arr[l][0]<<" ";         |}
   }                                 |
-------------------------------------|-----------------------------------------------------------------------------------------------------------
transpose of a matrix

swap(mat[i][j],mat[j][i]);                       |spiral tranversal of a matrix;
                                                 |void printspiral(int mat[][],int r,int c){
rotating the matrix 90 degree                    |    int top=0,left=0,bottom=r-1,right=c-1;
    the idea is to first find the transpose      |    while(top<=bottom && left<=right){
    reverse individual columns                   |        for(int i=left;i<=right;i++){
    hence the matrix rotated 90 degrees          |            cout<<mat[top][i]<<" ";
                                                 |        }
    void rotate(int mat[n][n]){                  |        top++;
        for(int i=0;i<n;i++){                    |        for(int i=top;i<=bottom;i++){
            for(int j=i+1;j<n;j++){              |            cout<<mat[i][right]<<" ";
                swap(mat[i][j],mat[j][i]);       |        }
            }                                    |        right--;
        }                                        |        if(top<=bottom){
        for(int i=0;i<n;i++){                    |            for(int i=right;i>=left;i--){
            int low=0,high=n-1;                  |                cout<<mat[bottom][i]+" ";
            while(low<high){                     |            }
                swap(mat[low][i],mat[high][i]);  |            bottom--;
            }                                    |        }
        }                                        |        if(left<=right){
    }                                            |            for(int i=bottom;i>=top;i--){
                                                 |                cout<<mat[i][left]+" ";
                                                              }
                                                          }


search in a row-wise and column wise sorted matrix
10 20 30 40
15 25 35 45
27 29 37 48
32 33 39 50

start from top right or bottom left and go accordingly
int i=0,j=c-1;
while(i<R && j>=0){
    if(mat[i][j]==x){
        print(found at i ,j)
    }else if(mat[i][j]>x){
        j--;
    }else
        j++;
}

meidan of an row-wise sorted matrix
int mat[][]={{1,10,20},
                {15,25,35},
                {5,30,40}};

1  10  20
15 25  35
5  30  40
**the idea is:-
    find the minimum and maximum element
    find the median position by r*c+1/2
    find the position of the mid vvalue from the minimum and maximum(**with the help of upper_bound())
        if the position is less than median position
            min=mid+1;
        else if position is > median position
*****            max=mid                        --like this because we are bringing the min 
                                                    and max close as long as they are equal
find the min and max element
int midpos=(r*c+1)/2;
while(min<max){
    int mid=(min+max)/2;//the mid element
    int midpos=0;
    for(int i=0;i<r;i++){
        midpos+=upper_bound(mat[i],mat[i]+c,mid)-m[i];//the position of the mid element 
    }
    if(midpos<medpos){
        min=mid+1;      //or mid=mid;
    }else{
        max=mid;        //max=mid-1;
    }
}
tc:-big o log(max-min)*r*log(base2)c;
