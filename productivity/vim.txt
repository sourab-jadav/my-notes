shift+h shift+l  for switching between buffers
gr to see the references
gd  go to defination        --jump to the variable declaration
gD                          --go to the global declaration of the variable

space+f  fuzzy search
-------searching
after the search to go back to the previous cursor position use ctrl+o(backword) ctrl+i(forward)
[count]/search

space+F
ctrl+\ for the terminal
ctrl+o o for the enter

vim.cmd "<vimscript>"  ==>runs the vim script

vsplit
split --horizontaally

we are using packer.nvim as our plugin manager
o
ctrl+k
ctrl+j
ctrl+e remove the popoup
ce remove the word
ctrl+space

v% to select the text in the brackets in visual mode                                                     
o                           --moves the cursor to the opposite end of hightlight                         
gv                          --select the last visual selected area                                       
ctrl+v $+A(type anything and press esc) --to shift all the way to the end of the line (as multi cursors) 
ctrl+v i                    --as multi cursors                                                           
ctrl+v(select the text) +c +esc --as multi cursors                                                       
**visual mode can also be applied on text objects                                                        
>i}                             --indents the block of the code                                          
---when you perform > it performs indentation depending on the value of the shift width setting          
set shiftwidth?<cr>
set tabstop?<cr>(wdith of the tab)
set expandtab<cr>(inserts the appropriate number of spaces instead of tab characters)
set list(for tabs to visible)

#*--------------------------------------indenting the lines go to the biggest line possible
type $,o A type |
:'<,'>center    --commands uses default of 80 columns to center with
:'<,'>center[ce] 40  --centers within the column of 40
:'<,'>le[5]
:'<,'>right[ri] 60
0 ctrl v j r #

**-----substitution in visual mode
:'<,'>s/usa/USA/<cr>

~ - Switch case
c - Change
d - Delete
y - Yank
r - Replace
x - Delete
I - Insert
A - Append
J - Join
u - Make lowercase
U - Make uppercase
> - Shift right
< - Shift left

cf<character>  

gr   produces the quick fix list showwig the references
gd   goes to the difination

> in the fileexplorer to jump over the folders

ctrl+o,i to move to prvious curson position

substitute command
use gc flag to do interactive replacement

=============to navigate in a large text===========
gk,gj,g^,g$,g-middle
**gi                        --to put you in previous editing mode

{   --parah begin       }   --parah end
[[  --section begin     ]]  --section end
(   --sentence begin    )   --sentence end

H           --first line of the screen
M           --middle line of the screen
L           --last line of the screen
zz          --adjusted at the middle of the page
z<enter>    --current line under cursor at the top
z-          --current line under cursor at the end
z.          --current line under curosr at the middle

:jumps      [ju]

=======================default buffers command===========
:ls                             --list buffers
:b2                             --open buffer2
:b <buffername>
:b <ctrl+d>                     --list options
:bn                             --nex buffer 
:bp                             --previous buffer 
:<ctrl+p>                       --show previous command
:bf                             --first buffer 
:bl                             --last buffer
<ctrl+^>                        --toogle better current and previosu

states

active                          --loaded into the memory and displyed on window
hidden                          --loaded into the memory and not displayed on window
inactive                        --not loaded inoto meory
h +                             --+ indicates we have usaved changes and h represents it is hidden buffer
+                               --changes not saved

:next *.txt                     --adding multiple files into a vim session
set hidden                      --allows to switch between buffers witout saving them
:badd <filename>(or):e <filename>--add file the current vim sessions
:bd3                            --delete the buffer3
:1,3bd<cr>                      --delete range of buffers
:2,$bd<cr>                      --delete all buffers from number 2
:%bd<cr>                        --delete all buffers  
:bufdo                          --execute command in every buffer(eg:-:bufdo set nu)
:bufdo set nu
:bufdo %s/#/@/g<cr>             --you will get an error as bufdo executed the command in the current window 
                                    and got an error when it tried to switch to the next buffer so it stoped
                                    error problem as set hidden option was not set

                                    --vim raises error when it tries to switch to the another buffer without saving the current buffer
                                    --set hidden allows to switch without saving and on closing the vim session if the chanes are not saved it raises an error

:bufdo %s/#/@/g | w             --this will perform substitution and write to the buffer and then switch to the next

or

:set hidden
:bufdo %s/#/@/g                 --no error
:wall                           --writes all buffers
:qall!                          --abanden the changes and quit
:E<cr>                          --open explorer

=============================window==================== 
:sp  or  <ctrl w s>             --horizontal split
:sp <filename>                  

:vs  or <ctrl w v>              --vertical split
**:on=:only                       --close all windows except the current one

--------------open all the files in the seperate window
qr                      --recording macro in the r register
:sp
:bn
q<cr>--stop recording
3@r                                             --play  macro present in the r register three time
@@                                              --play the last macro
27,35normal @d                                  --supplying a range to a macro
.,$normal @d                                    --current line to the end of the file
^M                                              --refers to the escape key
"ap                                             --paste the contents of the macro                                                                                        
"ay$                                            --modify the macro and paste it back to the register
let @d ='macro'                                 --saving the macro in your .vimrc
let @t ='ITODO: (TYPE CTRL+V AND TYPE THE CHARACTER) j'
let @b ='G$o$ooA|€ýa'                 --for indenting the lines

-----------------------------------------------------
ctrl w - --decarease the height of the window       |
ctrl w + --increase the height of the window        |
ctrl w > --increase the width of the window         |
ctrl w < --decrease the width of the window         |
ctrl w _ --maximize the height of the window        |
ctrl w | --maximuize the width of the window        |
ctrl w = --to make all the window equal size        |
----------------------------------------------------
ctrl w r --rotate the windows
ctrl w R --rotate in the opp direction

ctrl w H -- moves the current window to the far left
ctrl w L -- moves the current window to the far righr

ctrl w J -- moves the current window to the far bottom
ctrl w K -- moves the current window to the far top

ba                          -----to open all the buffers as widow
:windo %s/#/@/g | w

:marks                    --lists all the files that you visted
`<mark num>               --goes to the required file
:ju                       --lists of the jumps of the current file
<num>ctrl-o               --goes back or upword in the ju list
<num>ctrl-i               --goes forward or down in the ju list
:g/^$/d                   --delete all the empty lines in the file
:g/^\s*$/d                   --delete all the empty lines in the file

             
:g/^$/,/./-j              Reduce multiple blank lines into a single blank lines
:g/pattern/d                  Delete the line which has a specific pattern
:g/pattern/ .               Extract lines with specific pattern and write it into another file
w>>filename               Reverse a file
:g/^/m0                   Add a C Style comment ( /* text */ ) to all lines
:g/^\s*PATTERN              matching the pattern
/exe "norm! I/*
\<ESC>A */\<ESC>"

:g!/Sales/d                   --delete all lines except the one containing Sales

. reg stores the previous typed text in the insert mode
:abbr ss simply fantistic     --creates an abbrevation for ss as simply fantistic
ls                            --type k on the word to visit its manpage
:set keywordprg=perldoc\ -f           To look up things other than Unix man pages, specify a different keywordprg. 
**use align.vim plugin to align the on one parameter :'<,'>Align =

=========================g power
gf                              --open a files undercursor




                                                                     

increement with ctrl+a on the number line |to get the above result vertical highlight go down and g ctrl a
21                                        |1
21                                        |2
21                                        |3
21                                        |4
21                                        |5
21                                        |6
21                                        |7
21                                        |8
21                                        |9
                                           10
                                           11

---deleting a block of text
ctrl v shift g shift d

--deletign the for loop block or whie loop block or and block of code
    shift+v shift+4+5+enter 
    

    working on takiya vim config file

    what we will get 
        open a new tab
        lauch telescope
        open base.lua
        color codes are highlited with colorizer.nvim
        splitwindow
        typescipt diagnostics by lspsaga <ctrl+j>
        hoeverdoc by lspsaga
        lsp finder with preview by lsp saga
        autocompletion with nvim-cmp
        autoimport with nvim-cmp
        tailwind css language server with mason.nvim

        ingredients

        packer.nvim     --a plugin manager foor nvim

        neosolorized.nvim   --a truecolor,  solorazied dark colorscheme

        lspkind-nvim        --vscode like pictorgrams

        luasnip             --snippet engine

        nvim-cmp            --completion engine

        cmp-nvim-lsp        --nvim cmp source for build in lsp

        cmp-buffer          --nvim--cmp source for buffer words

        nvim-lsp-config     --nvim's built in lsp configuration set

        null-ls.nvim        --use neovim as a language server

        prettier.nvim       --prettier plugin for neovim's built in lsp client

        mason.nvim          --portable package manager for lsp servers, dap -servers,linters and formatters

        masonlspconfig      --lsp config extension for mason.nvim

        lspsaga.nvim        --a highly perfomant ui for lsp

        nvim-treesitter     --treesitter configuration and abstraction layr

        nvim-devicons       --lua fork of vim-web-devicons

        telescope.nvim      --a highly extendable fuzzy finder over lists

        telescope-file-browser.nvim     --file browser extension for telescope

        nvim-autpairs

        nvim-ts-autotag     --use treesitter to autoclose and auto rename html tag

        nvim colorizer      --a high performance color highlighter

        nvim-bufferline     --a snazzy buffer line

        gitsigns.nvim       --git integration for buffers

        git.nvim            --a simple clsone of the plugin vim-fugitive

writing lua in the nvim :lua print('hello')

in .config mkdir nvim

where binary is located         --which nvim

create symlink for the installed neovim or create an aliase for the neovim
            ln -s (which nvim) /opt/homebrew/bin/vim

----------in .config/nvim/    init.lua    -->add print('init.lua loaded')

config
    nvim
    init.lua        ---->add require('base')

        lua
        base.lua    ----->print('base')
        highlights.lua

        after
        plugin
--------------------

now ready to write the base configuration of lua

M=vim.opt
M.scriptencoding='utf-8'
M.encoding='utf-8'
M.fileencoding='utf-8'

M.nu=true;
M.autoindent=true;
M.hlsearch=true;
M.backup=false;
M.showcmd=true;     --show the cmd in typed in normal mode on the screen
**M.cmdheight=1;      --set the cmd height
M.laststatus=2;
expandtab=true;
scrolloff=10
shell=zsh;
backupskip='/tmp/*./private/tmp/*'
inccommand='split'
ignorecase=true
smarttab=true
**breakindent=true
shiftwidth=2                    --- the number of spaces inserted for each indentation
tabstop=2                       --  insert two spaces for a tab
ai=true --auto indent
si=true -- smart indent
wrap=false
backspace='start,eol,indent'
**path:append{'**'}               --finding files search down into subfolders
wildignore:append{'*/node_modules/*'}

--undercurl

vim.api.nvim_create_autocmd("InsertLeave",{     --turn off paste mode when leaving insert mode
    pattern='*',
    command="set nopaste"
})

vim.apt.formatoptions:append{'r'}

=================highlights.lua
cursorline=true;
termguicolors=true;
winblend=0
wildoptions='pum'
publend=5
background='dark

============================================maps

local keymap=vim.keymap

keymap.set('n','x',"_x")                    --do not yank with x

keymap.set('n','+','<C-a>')                 ---****to increase
keymap.set('n','-','<C-x>')                 ---****to decrease

keymap.set('n','dw','vb"_d')                -----delete a word backwords
keymap.set('n','<C-a>','gg<S-v>G')          -----**select all

        TABS
keymap.set('n','te',':tabedit<Return>')
keymap.set('n','ss',':split<Return><C-w>w')
keymap.set('n','vs',':vsplit<Return><C-w>w')

