alt+shift+j --opening the developer tools
cmd+apt+j

variable initialization        --let js='amazing';
if statement                if(js=='amazing')alert('jaavscript is fun')
            history
                es6-es2015(biggest update to the language ever)
                alfter es11 --every year new update
printing
console.log()
let person =true;
typeof              console.log(typeof true)

language='portugese'
operator precedence
x = y = 25 - 10 - 5; // x = y = 10, x = 10
console.log(typeof null);                           --object
javascript is dynamically typed 
**    i.e it is the value that has a type and variable just stores the type of value
typeof null                                         --bug in javascript
if the string does not have placeholders you can you backticks
**console.log(`Just a regular string...`);

**console.log('String with \n\
multiple \n\
lines');
--is equal to 
console.log(`String
multiple
lines`);

const job;              ----uncaught syntax error
--------------------------------------------------
const job=45;
job=65                  ---type error 
---------------------------------------------------
jonas                   ---uncaught reference error:jonas is not defined
---------------------------------------------------

                           WORKING WITH LET CONST VAR
**********VAR KEYWORD
global scope or function scope      --once declared globally can be accessed anywhere
redeclaration is possible and update is possible
**useing variable before declaration initializes with undefined value
hoisting is done width initializing as the default value undefined


--------------------**LET KEYWORD
**follows block scope
**cannot redclare defined with the let keyword but can update it    --returns Uncaught SyntaxError
      **Users can declare the variable with the same name in different blocks using the let keyword.
      <script>
              let a = 10
              if (true) {
                let a=9
                console.log(a) // It prints 9
              }
              console.log(a) // It prints 10
      </script>
      op:9
         10
** If users use the let variable before the declaration, it does not initialize with undefined what a var variable does and returns an error.
<script>
	console.log(a);
	let a = 10;
</script>
Uncaught ReferenceError: Cannot access 'a' before initialization
**hoisting(only declaration is done and when youprint that it throws error) is done without initialization this the reason for refernce error 

*****let and const cannot access variables before initialization it throws exception
--------------------**CONST KEYWORD
**has the same properties as the let variable but cannot initialize
**Users cannot change the properties of the const object, but they can change the value of the properties of the const object.
<script>
	const a = {
		prop1: 10,
		prop2: 9
	}
	
	// It is allowed
	a.prop1 = 3

	// It is not allowed
	a = {
		b: 10,
		prop2: 9
	}
</script>






7 premitive datatypes
Number,String,Boolean,Undefined,Null,Symbol,BigInt(optional)




operator precedence--------
exponentiation  right to left
multiplication  left to right
divistion       lefet to right
reminder        left to right
add
subtract        left to right
bitwise         left to right




taking decisions(control statements)

if (age >= 18) {
  console.log('Sarah can start driving license 🚗');
} else {
  const yearsLeft = 18 - age;
  console.log(`Sarah is too young. Wait another ${yearsLeft} years :)`);
}



type conversion(manual conversion) and type coercion(auto conversion)
const inputyear='1991'
// type conversion
const inputYear = '1991';
console.log(Number(inputYear), inputYear);
console.log(Number(inputYear) + 18);
console.log(Number('Jonas'));               --NaN
console.log(typeof NaN);                    --o/p:number(but invalid one)
console.log(String(23), 23);



// type coercion
console.log('I am ' + 23 + ' years old'); console.log('I am ' + '23' + ' years old');
console.log('23' - '10' - 3); //10
console.log('23' / '2');11.5

let n = '1' + 1; // '11'
n = n - 1;
console.log(n);
2+3+4+'5'     //95
'10'-'4'-'3'-2+'5' //15


//truthy and falsy values
// 5 falsy values: 0, '', undefined, null, NaN
console.log(Boolean(0));
console.log(Boolean(undefined));
console.log(Boolean('Jonas'));--true;
console.log(Boolean({}));--true;
console.log(Boolean(''));


== loose equality operator '18'==18   --true;
=== strict equality operator '18'===18  --false;
const favourite = Number(prompt("What's your favourite number?"));
console.log(favourite);
console.log(typeof favourite);


//boolean operators
&& || !


//switch statement
switch(variable){
    case 'monday':
        console.log()
        break;
    case 'tuesday':
        console.log()
        break;
    default:
        console.log('not a valid day')
}

expressions(something that has value) and statements
statements  -->basically we write our whole programs as a sequence of actions these actions are statemets
console.log(`I'm ${2037 - 1991} years old ${me}`);--here inside {} javascript expects expression

//the condition operator
const age = 23;
// age >= 18 ? console.log('I like to drink wine 🍷') : console.log('I like to drink water 💧');
const drink = age >= 18 ? 'wine 🍷' : 'water 💧';
console.log(drink);




//javascript releases

from 2016 ecmascript changes to an annual release cycle in order to ship less features per update



//how to use modern javacript today

during production  :use babel totranspile and polyfil your code (convertin back to es5 to ensure browser compbatiblity for all users)




=================02 fundamentals course=========

'use strict'  --for writing more secure code

---fucntions

function fruitProcessor(apples, oranges) {
  const juice = `Juice with ${apples} apples and ${oranges} oranges.`;
  return juice;
}


function without a name is anaenemouse function and acts as an expression

// Function declaration
function calcAge1(birthYeah) {
  return 2037 - birthYeah;
}
const age1 = calcAge1(1991);

// Function expression
const calcAge2 = function (birthYeah) {
  return 2037 - birthYeah;
}

//arrow function
const calcAge3 = birthYeah => 2037 - birthYeah;
const age3 = calcAge3(1991);
console.log(age3);
const yearsUntilRetirement = (birthYeah, firstName) => {
  const age = 2037 - birthYeah;
  const retirement = 65 - age;
  // return retirement;
  return `${firstName} retires in ${retirement} years`;
}
console.log(yearsUntilRetirement(1991, 'Jonas')); console.log(yearsUntilRetirement(1980, 'Bob'));


//arrays

const friends = ['Michael', 'Steven', 'Peter'];
const y = new Array(1991, 1984, 2008, 2020);
console.log(friends);
console.log(friends[0]);
console.log(friends[2]);
console.log(friends.length);
console.log(friends[friends.length - 1]);

------------------------------------------
const calcAge = function (birthYeah) {
  return 2037 - birthYeah;
}
const years = [1990, 1967, 2002, 2010, 2018];
console.log(years+10) --o/p: 1990,1967,2002,2010,201810
console.log(years-10) --o/p:NaN
console.log(calcAge(years))     ----o/p:NaN
const ages = [calcAge(years[0]), calcAge(years[1]), calcAge(years[years.length - 1])];
console.log(ages);
------------------------------------------
===array operations
const newLength = friends.push('Jay');//add at the last 
friends.unshift('John');   ---add at the beginning
friends.pop(); //delete Last
friends.shift(); // delete First
console.log(friends.indexOf('Steven')); --returns the index if prsent else returns -1
console.log(friends.includes('Steven')); --returns true or false




//objects
const jonasArray = [
  'Jonas',
  'Schmedtmann',
  2037 - 1991,
  'teacher',
  ['Michael', 'Peter', 'Steven']
];

const jonas = {
  firstName: 'Jonas',
  lastName: 'Schmedtmann',
  age: 2037 - 1991,
  job: 'teacher',
  friends: ['Michael', 'Peter', 'Steven']
};
console.log(jonas.lastName);
console.log(jonas['lastName']);
console.log(jonas['first' + nameKey]);
console.log(jonas['last' + nameKey]);
console.log(jonas.'last' + nameKey) --not work
const interestedIn = prompt('What do you want to know about Jonas? Choose between firstName, lastName, age, job, and friends');
if (jonas[interestedIn]) {
  console.log(jonas[interestedIn]);
} else {
  console.log('Wrong request! Choose between firstName, lastName, age, job, and friends');
}

jonas.location = 'Portugal';
**The values inside the const array can be change, it can add new items to const arrays but it cannot reference to a new array.
jonas['twitter'] = '@jonasschmedtman';
console.log(jonas);
// Object Methods

const jonas = {
  firstName: 'Jonas',
  lastName: 'Schmedtmann',
  birthYeah: 1991,
  job: 'teacher',
  friends: ['Michael', 'Peter', 'Steven'],
  hasDriversLicense: true,

  // calcAge: function (birthYeah) {
  //   return 2037 - birthYeah;
  // }

  // calcAge: function () {
  //   // console.log(this);
  //   return 2037 - this.birthYeah;
  // }

  calcAge: function () {
    this.age = 2037 - this.birthYeah;
    return this.age;
  },

  getSummary: function () {
    return `${this.firstName} is a ${this.calcAge()}-year old ${jonas.job}, and he has ${this.hasDriversLicense ? 'a' : 'no'} driver's license.`
  }
};

console.log(jonas.calcAge());
console.log(jonas.age);
console.log(jonas.age);
console.log(jonas.age);
for (let rep = 1; rep <= 30; rep++) {
  console.log(`Lifting weights repetition ${rep} 🏋️‍♀️`);
}
const types = [];
for (let i = 0; i < jonas.length; i++) {
  // Reading from jonas array
  console.log(jonas[i], typeof jonas[i]);

  // Filling types array
  // types[i] = typeof jonas[i];
  types.push(typeof jonas[i]);
}
// continue and break
console.log('--- ONLY STRINGS ---')
for (let i = 0; i < jonas.length; i++) {
  if (typeof jonas[i] !== 'string') continue;

  console.log(jonas[i], typeof jonas[i]);
}

console.log('--- BREAK WITH NUMBER ---')
for (let i = 0; i < jonas.length; i++) {
  if (typeof jonas[i] === 'number') break;

  console.log(jonas[i], typeof jonas[i]);
}



=====================================dom manupulation==================
dom is not a part of the javascript language
they are the part of the web api
web api's are libraries that browsers implement and we can acces them from javascript code
let secretNumber = Math.trunc(Math.random() * 20) + 1;
run---Math.random()

reading the value=====document.querySelector('.guess').value;
writing the value  ===document.querySelector('.guess').textContent=<any number of string>
--------------manupulating the css styles
document.querySelector('body').style.backgroundColor='#60b347'
document.querySelector('.number').style.width='30rem'

**for selecting multiple queries related to the same class         const btnsOpenModal = document.querySelectorAll('.show-modal');(it is nodelist)
for(let i=0;i<btnsOpenModal.length;i++)
    console.log(btnsOpenModal[i].textContent);
===summary of query selector
---writing===>.value
---reading===>.textContent
---css-style=>.style.<property>


classList.add('<class>')
classList.remove('<class>')
classList.toggle('<class>')



=============================modal window
tips
first select the class elements and store them in an variables to use over over again


**to add a keylistener for keyboard
document.querySelector('<class name>').addEventListeners('click',<function>)  --for mouse
docuement.addEventListener('keydown',<function>)            --for keyboard          ---activates on pressing any key

**managing specific key pressed event
docuement.addEventListener('keydown',(e)=>{
    if(e.key==='Escape'&&!modal.classList.contains('hidden'))
    {
        closeModal();

    }
        })


*for making flow charts website is diagrams.net



=================================================================high level overview of javascript======================================== 
javascript is a high-level
object-oriented,multi-paradigm programming language


high-level-->                                                     --every program that runs on your computer needs hardware resources such as memory and the cpu to do its work
                                                                    there are low level languages such as c where you have to manually manage the resources

                                                                    on the other side there are high level languages such as js or python where we do not have to manage the resources
                                                                    because these languages have so called abstractions to manage the resources this makes languages easier to learn and use 
                                                                    but the down side is programs are not so optimized as c programs
                                                                        
                                                                        one powerfull too that takes memory management away from us is garbage-collecter


interpreted or just-in-time-compiled



paradigm-->                 an approach and mindset of structuring code, which will direct your coding style and techinque.
                            procedural
                            object-oriented             -->prototype-based object-oriented
                            functional-programming 

first-class functions       functions are simply treated as variables
                            eg:
                            overlay.addEventListener("click",closeModal);

dynamic                     dynamically typed language
                            we don't specifiy datatype to our variables
                            instead they only became known when our javascript executes our code
                            also the type of variables can be changed if we resign variables                            

                            let x =23;
                            let y=19;
                            x="jonas";

                            javascript with types is typescript


single-threaded             concurreny modal:how the javascript engine handles mutliple tasks happening at the same time
                            (why do we need it)  js runs on single thread so it can only do one thing at a time
                            (so what about a long running task) sounds like it would block a single thread however we want non blocking behaviour
                            (how do we achieve that ) by using an event loop
                                                                    
                                                                    takes long running takses, exectues them in the "backgrouond", and puts them in the 
                                                                    main thread once they are finished
================================================================================================================================================================ 

java script engine          is simply a computer program that executes javascript code
                            every browser has its own javascript engine 
                            most popular is google's(google chrome) v8 engine                  -->it powers google chrome and node js(javascript runtime)(used to build server side applications with javascript)

                            any javascript engine always contains a call stack and heap
                                    --call stack is where our code is actually executed
                                    --heap is an unstructured memory pool where your objects are stored

                            (how the code is compiled)
                                        compilation     --two steps compiling--execting
                                        interpretation  --oen step  execution line by line
                                        (modern javascript uses mix between compilation and exection classed just in time compilation)
                                        compiles the program at once and exectues it write away automatically
                                        source code     ------>         machine code  ----->  program running
                                                        compilation
                                                        -----------modern just in time compilation of javascript-------
                                                        js code--enters the engine--parsing(read) takesplace(it is parsed into a ds called abstract syntax tree(code is broken into pieces and stored in tree))
                                                        2>  compilation         -->takes the ast and compiles
                                                            execution(right away) ->it happens in js call stack
                                                            during execution optimization is being done and replace it with unoptimized code
                                                            all these process happen in some special thread inside the engine that we cannot acess
                        

js runtime -->container that includes  all the things that we need to use javascript (in this case in the browser)
it contains js engine and web api's(that's everything related to the dom or timers or even console.log())
a typical js runtime also includes call back queue(it is a ds that contains all the call back functions that are ready to be exected eg:event handler functions)
when the event happens the call back function will be called
                                                        the callback func is put inside the call back queue when the call stack is empty
                                                        the callback is passed to the stack so that it can be executed
                                                                   it happens by something called event loop
                                                                           event loop takes the call back func from callback queue and puts them on to the call stack so they can be executed

javascript also exists outside the browers its simpiler  but as we don't have the browser we simply can't have the web api's instead we have multiple cpp bindinngs



 |----------------------------------------|---------------------------------------- |
 |exectution context                      |         inside execution context        |
 |----------------------------------------|---------------------------------------- |
 |-->after the compilation the code is re | has variable environment                |
 |    ady to be executed then global exec | scope chain                             |
 |    ution context is created then       | this keyword                            |
 |    (for top l                          | var env has let const var declarations  |
 |    level code)(code that is not inside | --functions                             |
 |    any function)                       | --objects                               |
 |    is executed                         |                                         |
 |                                        |                                         |
 |    it is like a box which contains a   |                                         |
 |    that contains all the nacessary     | exectuion context belonging to the arrow| 
 |    information for the code to be      | function do not get their arguement obj |
 |    executed such as local variable     | this keyword kdfsdf                     |
 |    arguments passed into a function    |                                         |
 |                                        |                                         |
 |    3.errespective of project size      |                                         |
 |    only one global execution context   |                                         |
 |    is created                          |                                         |
 |                                        |                                         |
 |    4.exection of functions and         |                                         |
 |    waiting for callbacks               |                                         |
 |----------------------------------------|---------------------------------------- |
 
     


----------------------------------------------------------------------------|---------------------------------------------------------------------------
                                     scope                                  |                                    hoisting
----------------------------------------------------------------------------|---------------------------------------------------------------------------
global scope                                                                |console.log(me)
outside  of any function block                                              |console.log(job)
accessible every hwere                                                      |console.log(year)
                                                                            |
local scope                                                                 |var me='jonas'
only inside the function                                                    |let job='teacher'
                                                                            |const year=1991
                                                                            |
block scope                                                                 |
    if(year>=1981 & year<=1986){                                            |just don't use var to delcare variables
        const var1=lksd                                                     |use const most of the time and 'let' if you need ot change the variab
        const var2=ksdjf;                                                   |les
    }                                                                       |declare the variables at the top of the each scope
    these var1 and var2 are accessed only inside the block                  |initilize all your functions first and use them only after 
    only let and  const are block scoped                                    |
    variables with var are accessable outside the block are function scoped |var x=1;
                                                                            |let y=2;
                                                                            |const z =3;
    if in the current scope the variable is not there it looks up in the nex|                                                                           t
        parent scoep                                                        |**window is the global object in the js type window in console
                                                                            |console.log(x==window.x)//true;
 **the order of function calls doesn't effect the scope chain               |console.log(y==window.y)//false;
                                                                            |console.log(z==window.z)//false;!!variables declared with var will create
                                                                            |a property on a global window object that can have some implications
------------------------------------------------------------------------------------------------------------------------------------------------------------

|hoisting in variables
|let,const variables throws uncaught reference error as they are in a
|temporal ded zone
|
|var variable are hoisted but hoisted as undefined prints value as undefined
|
|hoisting in functions
|functions can be accessed from the above doing initialization below
|function expressions with var type throws error typeerror


this keyword
console.log(this.any)                   //undefined
console.log(this);                      | prints windows object
const calcage = function (birthYear) {  |
  console.log(2037 - birthYear);        |
  console.log(this);                    | undefined
};                                      |
calcage(1991);

const calcAgeArrow = birthYear => {   |
  console.log(2037 - birthYear);      |
  console.log(this);                  |prints window as arrow function doesn't get it own this keword it uses this keword of its parent function
};                                    |
calcAgeArrow(1980);                   |

const jonas = {                       |
  year: 1991,                         |
  calcage: function () {              |
    console.log(this);                |prints jonas object  --as jonas is the object calling this method
    console.log(2037 - this.year);    |
  },                                  |
};                                    |
jonas.calcage();                      |

const matilda = {                     
  year: 2017,
};

matilda.calcAge = jonas.calcAge;    | we simply copied calcage function from jonas to matilda
matilda.calcAge();                  | now you can you this function inside matilda 

const f = jonas.calcAge;            |
f();                                | now this year becomes undefined as their is not ojbect calling the function from 525 it is undefined



regular functions vs arrow functions


const jonas = {                          |
  year: 1991,                            |
  calcage: function () {                 |
    console.log(this);                   |prints jonas object  --as jonas is the object calling this method
    console.log(2037 - this.year);       |
  },                                     |/*not that jonas object is inside {} is not a code block(just an object literal)
  greet: () => {                         |
    console.log(this);                   |/* all of this inside jonas object are in global scope still*/
    console.log(`Hey ${this.firstName}`);|
};                                    
jonas.great                              |//prints "hey undefined" arrow function use this keyword from its parent scope(here it is global scope)


// var firstName = 'Matilda';            |//prints "hey matilda" on calling jonas.great as variables declared with var will create a property on 
                                            global window object and the arrow function inside the jonas object will use this window object

**this is arrow function points to the parent object this and parent for the global object is window
***this keyword inside a regualar function call is undefined
***this keyword inside a method of an object this keyword points to the objects variables

**arrow functions with more than one line of code you have excplictly specify the return keyword

const jonas = {
  firstName: 'Jonas',
  year: 1991,
  calcAge: function () {
    // console.log(this);                                        |prints jonas(current object window)
    console.log(2037 - this.year);                               |works fine it gets its own this keyword
                                                                 |
    // Solution 1                                                |
    // const self = this; // self or that                        |outside we have access to this keyword so we assign it to a variable
    // const isMillenial = function () {                         |
    //   console.log(self);                                      |
    //   console.log(self.year >= 1981 && self.year <= 1996);    |
    // };                                                        |
                                                                 |
    // Solution 2                                                |
    const isMillenial = () => {                                  |using this inside an arrow func is going to work because arrow function does
      console.log(this);                                         |not have its own this keyword it uses its parent this keyword here jonas
      console.log(this.year >= 1981 && this.year <= 1996);       |
    };                                                           |
    isMillenial();                                               |
  },                                                             |here calling via regular function makes this keyword undefined and we cannot access its values
                                                                 |above two sol1 and sol2 are the solutions for the problem
  greet: () => {                                                 |
    console.log(this);                                           |
    console.log(`Hey ${this.firstName}`);                        |
  },
};
jonas.greet();                                                   |prints parents window here deafult global window
jonas.calcAge();



argument keyword only exists in function expressions and function declaratoins but not on arrow fucntions


** in javascript value at certain address is immutable i.e it cannot be changed

in case of me object the reference value me does not point directly to the newly created memory in the heap
        it points to the memory created in the stack and this new piece of memory present in the stack will point to the object in heap


let age = 30;
let oldAge = age;
age = 31;
console.log(age);
console.log(oldAge);

const me = {
  name: 'Jonas',
  age: 30,
};
const friend = me;                      //even though we defined friend variable as constant we can still manupulate the object as we are not changing the value of friend in memory
                                            we are changing in the location where its value is actually referring to 
friend.age = 27;
console.log('Friend:', friend);
console.log('Me', me);

**its a misconception that all the variables are declared as const are immutable its only true for primitive values not for reference values
which are referring to another location in the heap


                                                                         future topics
protypal inheritince        --oops with js
event loop                  --asynchronous js
how the dom actually works  --advanced dom and events



// Reference types
const jessica = {
  firstName: 'Jessica',
  lastName: 'Williams',
  age: 27,
};
const marriedJessica = jessica;
marriedJessica.lastName = 'Davis';
console.log('Before marriage:', jessica);
console.log('After marriage: ', marriedJessica);
// marriedJessica = {};                              |assignging hole new object will not work as this new object will store in a diff loc in memory
                                                     |therefore the ref to that position in the memory will have to change
// Copying objects                                   |
const jessica2 = {                                   |
  firstName: 'Jessica',                              |
  lastName: 'Williams',                              |
  age: 27,                                           |
  family: ['Alice', 'Bob'],                          |
};                                                   |
                                                     |
const jessicaCopy = Object.assign({}, jessica2);     |**Object.assign() **/used in copy of objects will only creates a shallow copy 
jessicaCopy.lastName = 'Davis';                      |but not a deep clone that means if have an object inside an object then this inner object will still remains the same
                                                     |
jessicaCopy.family.push('Mary');                     |**here family array is acting as an inner object  any change in jessicaCopy will also get reflected in jessica2
                                                     |because shallow copy is being made from jessica2 to jessicaCopy of inner object family
jessicaCopy.family.push('John');                     |new object of family is not created in jessicaCopy
                                                     |
console.log('Before marriage:', jessica2);           | we use deep clone using an external liberary called lowdash
console.log('After marriage: ', jessicaCopy);        |
*/



we looked at the 
  &&       if first operand is true then it moves forward
  ||      if first operand is false then it moves forward
  ??      nullish operator has undefined null as the only falsy values  and if false it moves forward else assigns to the variable

  worked with rest parameters ...
  using [] operator widely
